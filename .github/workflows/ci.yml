# CI + GitHub Pages für Maven-Java-Projekt
# - Baut & testet (Maven)
# - Erzeugt Reports (Site, JaCoCo, SpotBugs, JXR, Javadoc)
# - Veröffentlicht target/site als GitHub Pages

name: Java CI + Pages

on:
  push:
    branches: [ main ]          # läuft bei Push auf main
  pull_request:
    branches: [ main ]          # testet PRs
  workflow_dispatch:            # manuell startbar

jobs:
  build-site:
    runs-on: ubuntu-latest

    steps:
      # 1) Repository auschecken
      - name: Checkout
        uses: actions/checkout@v4

      # 2) JDK 20 bereitstellen (Aufgabe fordert JDK 20)
      #    cache: maven beschleunigt Folgeläufe
      - name: Set up JDK 20
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '20'
          cache: maven

      # 3) Build + Tests + Site + Javadoc erzeugen
      #    -U  = Abhängigkeiten aktualisieren
      #    -B  = Batch-Mode (kürzere Logs)
      #    -ntp= ohne Transfer-Progress
      - name: Build, test, generate site
        run: mvn -U -B -ntp clean verify site javadoc:javadoc

      # 4) Optional: JAR als Artefakt sichern (Download im Actions-Run)
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          if-no-files-found: warn
          retention-days: 7

      # 5) Ganze Maven-Site (inkl. Reports + apidocs) für Pages hochladen
      - name: Upload site as Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/site

  # 6) Deployment auf GitHub Pages
  deploy:
    needs: build-site
    runs-on: ubuntu-latest
    permissions:
      pages: write      # erlaubt Deployment auf Pages
      id-token: write   # für OIDC-Auth
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}  # Pages-URL in der Run-Ansicht
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
